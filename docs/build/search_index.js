var documenterSearchIndex = {"docs":
[{"location":"#ColumnFrames.jl","page":"Introduction","title":"ColumnFrames.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A lightweight Tables.jl compatible table designed to mimic the NamedTuple API. It is designed for authors of Statistical packages who want an easty-to-use table type without large dependency chains.","category":"page"},{"location":"#Motivation","page":"Introduction","title":"Motivation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"In the Julia data ecosystem, package authors have two main options when working with tabular data: NamedTuples and DataFrames from DataFrames.jl. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"NamedTuples are useful because it has no dependencies and a streamlined API, however they have a few drawbacks. First, they are not mutable, making it difficult to work with as a persistent object. Second, NamedTuples encode column names and types as part of the type information. This can create annoying compile times for interactive work and prohibitively long compile times for wide tables â€“- over 1000 columns. Finally, they are not designed for tables, and do not check for consistent column lenghts.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"DataFrames are fast for interactive work and are mutable, but the DataFrames.jl package is large has numerous dependencies, making it unsuitable for package authors looking to avoid long compile times and package incompatabilities. It also has a large API surface, which may feel like \"overkill\" for minimal table operations.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The ColumnFrames.jl seeks the best of both worlds. It provides the AbstractColumnFrame type which ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Has no dependencies apart from Tables.jl\nHas a limited API surface. AbstractColumnFrame provides only the API of  NamedTuple from Base and Tables.jl, apart from a few usability exceptions such as indexing with strings and copying. \nIs deliberately type-unstable, which allows for convenient interactive work and wide tables (type stability is easily regained with function barriers)\nPresents the MutableColumnFrame type for mutable columnframes, making it easy to add new columns like a DataFrame","category":"page"},{"location":"#Usage","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The AbstractColumnFrame type has two sub-types: ColumnFrame and MutableColumnFrame. They are both indexed collections of columns, similar to a DataFrame. MutableColumnFrame allows adding columns. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using ColumnFrames\nusing ColumnFrames: Tables","category":"page"},{"location":"#Construction","page":"Introduction","title":"Construction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"You can construct a ColumnFrame or MutableColumnFrame in the following ways","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Keyword arguments\nA vector of data and a vector of names\nAny type of Tables.jl source, including a NamedTuple of vectors and a vector of NamedTuples. ColumnFrames and MutableColumnFrames can both be constructed seamlessly from CSV.jl's CSV.File objects as well as DataFrames, StructArrays and any other Tables.jl source. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"See examples below. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"person_names = [\"Juan\", \"Ziyi\", \"Annette\", \"Muhammad\"];\nages = [34, 45, 27, 52];\nnt = (; person_name = person_names, age = ages);\nrowtable = [\n\t(person_name = \"Juan\", age = 34),\n\t(person_name = \"Ziyi\", age = 45),\n\t(person_name = \"Annette\", age = 27),\n\t(person_name = \"Muhammad\", age = 52)]\n\ns = begin \n\tColumnFrame(; person_name = person_names, age = ages);\n\tColumnFrame([person_names, ages], [:person_name, :ages])\n\tColumnFrame(nt)\n\tColumnFrame(rowtable)\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"m = begin \n\tMutableColumnFrame(; person_name = person_names, age = ages);\n\tMutableColumnFrame([person_names, ages], [:person_name, :ages])\n\tMutableColumnFrame(nt)\n\tMutableColumnFrame(rowtable)\nend","category":"page"},{"location":"#Learning-about-the-ColumnFrame","page":"Introduction","title":"Learning about the ColumnFrame","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The API of ColumnFrames.jl is as close as possible to a NamedTuple. ","category":"page"},{"location":"#Number-of-columns","page":"Introduction","title":"Number of columns","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Length and iteration mirror NamedTuples","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"length(s)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"for col in s\n\tprintln(col)\nend","category":"page"},{"location":"#Names-of-columns","page":"Introduction","title":"Names of columns","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Get the names of the columns with keys or propertynames. Also the columnnaes function from Tables.jl","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"column_names = begin\n\tkeys(s)\n\tpropertynames(s)\n\tTables.columnnames(s)\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Check that a column exists with haskey","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"haskey(s, :person_name)","category":"page"},{"location":"#Length-of-columns","page":"Introduction","title":"Length of columns","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ColumnFrames.jl performed internal checks to ensure the length of columns are the same. Get the length by calling","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"length(first(s))","category":"page"},{"location":"#Accessing-columns","page":"Introduction","title":"Accessing columns","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Columns can be accessed via getproperty (x.a), or getindex (x[:a]), for both Symbols and Strings. Columns can also be accessed by column position. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"person_names = begin\n\ts.person_name\n\ts.\"person_name\"\n\ts[:person_name]\n\ts[\"person_name\"]\n\ts[1]\nend","category":"page"},{"location":"#Subsetting-columns","page":"Introduction","title":"Subsetting columns","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Create a new AbstractColumnFrame object by indexing an AbstractVector or Tuple of names. Row indexing is not supported. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"s = ColumnFrame(\n\t[i * (1:3) for i in 1:5], \n\t[Symbol(\"x$i\") for i in 1:5])\n\ns_sub = begin\n\ts[[:x1, :x2, :x3]]\n\ts[[\"x1\", \"x2\", \"x3\"]]\n\ts[1:3]\n\ts[(:x1, :x2, :x3)]\n\ts[(\"x1\", \"x2\", \"x3\")]\n\ts[(1, 2, 3)]\nend","category":"page"},{"location":"#Adding-columns-to-MutableDataFrames","page":"Introduction","title":"Adding columns to MutableDataFrames","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Only MutablColumnFrames support adding columns. You can add a column via setindex! (s[:a] = ...), or setproperty! (s.a = ...). ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"m = MutableColumnFrame(;\n\tperson_name = [\"Juan\", \"Ziyi\", \"Annette\", \"Muhammad\"],\n\tage = [34, 45, 27, 52])\n\nm[:city] = [\"San Diego\", \"Columbus\", \"Santa Fe\", \"Concord\"]\nm[\"Commute length\"] = [34, 12, 45, 43]\nm.commute_type = [\"Car\", \"Train\", \"Walk\", \"Bike\"]\nm","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"You can also modify existing columns in the same way","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"m[:age] = m.age .+ 1\nm[2] = m.age .- 1 # Second column is age\nm","category":"page"},{"location":"#Deleting-columns-from-MutableDataFrames","page":"Introduction","title":"Deleting columns from MutableDataFrames","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"You can delete columns from a MutableDataFrame with delete!","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"m2 = delete!(m, :commute_type)","category":"page"},{"location":"api/api/#API","page":"API","title":"API","text":"","category":"section"}]
}
