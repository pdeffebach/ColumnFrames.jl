var documenterSearchIndex = {"docs":
[{"location":"#ColumnFrames.jl","page":"Introduction","title":"ColumnFrames.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A lightweight Tables.jl compatible table designed to mimic the NamedTuple API. It is designed for authors of Statistical packages who want an easty-to-use table type without large dependency chains.","category":"page"},{"location":"#Motivation","page":"Introduction","title":"Motivation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"In the Julia data ecosystem, package authors have two main options when working with tabular data: NamedTuples and DataFrames from DataFrames.jl. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"NamedTuples are useful because it has no dependencies and a streamlined API, however they have a few drawbacks. First, they is not mutable, making it difficult to work with as a persistent object. Second, NamedTuples encode column names and types as part of the type information. This can create annoying compile times for interactive work and prohibitively long compile times for wide tables â€“- over 1000 columns. Finally, they are not designed for tables, and do not check for consistent column lenghts.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"DataFrames are fast for interactive work and are mutable, but the DataFrames.jl package is large has numerous dependencies, making it unsuitable for package authors looking to avoid long compile times and package incompatabilities. It also has a large API surface, which may feel like \"overkill\" for minimal table operations.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The ColumnFrames.jl seeks the best of both worlds. It provides the AbstractColumnFrame type which ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Has no dependencies apart from Tables.jl\nHas a limited API surface. AbstractColumnFrame provides only the API of  NamedTuple from Base and Tables.jl, apart from a few usability exceptions such as indexing with strings and copying. \nIs deliberately type-unstable, which allows for convenient interactive work and wide tables (type stability is easily regained with function barriers)\nPresents the MutableColumnFrame type for mutable columnframes, making it easy to add new columns like a DataFrame","category":"page"},{"location":"#Usage","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The AbstractColumnFrame type has two sub-types: ColumnFrame and MutableColumnFrame. They are both indexed collections of columns, similar to a DataFrame. MutableColumnFrame allows adding columns. ","category":"page"},{"location":"api/api/#API","page":"API","title":"API","text":"","category":"section"}]
}
